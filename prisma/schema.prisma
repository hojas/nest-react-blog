generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CommentStatus {
  PENDING
  RESOLVED
  REJECTED
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar
  code       String   @unique @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)
  users      User[]
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar // email as username
  password   String    @db.VarChar
  phone      String    @unique @default("") @db.VarChar
  nickname   String    @unique @default("") @db.VarChar
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  roles      Role[]
  articles   Article[]
  comments   Comment[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar
  code        String    @unique @db.VarChar
  order_index Int       @default(0)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  articles    Article[]
}

model Article {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar
  content       String
  category_id   Int
  author_id     Int
  like_count    Int       @default(0)
  collect_count Int       @default(0)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  category      Category  @relation(fields: [category_id], references: [id])
  author        User      @relation(fields: [author_id], references: [id])
  tags          Tag[]
  comments      Comment[]
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  articles   Article[]
}

model Comment {
  id         Int           @id @default(autoincrement())
  content    String        @db.VarChar
  author_id  Int
  article_id Int
  status     CommentStatus @default(PENDING)
  parentId   Int?
  created_at DateTime      @default(now()) @db.Timestamp(6)
  updated_at DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  author     User          @relation(fields: [author_id], references: [id])
  article    Article       @relation(fields: [article_id], references: [id])
}
